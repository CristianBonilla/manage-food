// <auto-generated />
using System;
using ManageFood.Infrastructure.Contexts.FoodShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ManageFood.Infrastructure.Contexts.FoodShop.Migrations
{
  [DbContext(typeof(FoodShopContext))]
  partial class FoodShopContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "8.0.4")
          .HasAnnotation("Relational:MaxIdentifierLength", 128);

      SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

      modelBuilder.Entity("ManageFood.Domain.Entities.FoodShop.CatalogueEntity", b =>
          {
            b.Property<Guid>("CatalogueId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<string>("Description")
                      .HasMaxLength(100)
                      .IsUnicode(false)
                      .HasColumnType("varchar(100)");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(30)
                      .IsUnicode(false)
                      .HasColumnType("varchar(30)");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("CatalogueId");

            b.HasIndex("Name")
                      .IsUnique();

            b.ToTable("Catalogue", "dbo");

            b.HasData(
                      new
                  {
                    CatalogueId = new Guid("efddc257-66f9-4abc-815e-cd8bb4d39897"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 10, 9, 45, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Verduras"
                  },
                      new
                  {
                    CatalogueId = new Guid("16d135b1-e117-47ad-a4ac-c15d40f133fd"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 14, 10, 11, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Frutas"
                  },
                      new
                  {
                    CatalogueId = new Guid("525d3a2b-3b4a-48e0-9e8e-8a5a844e4d0b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 5, 33, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Description = "Cereales sin grasa",
                    Name = "Cereales"
                  },
                      new
                  {
                    CatalogueId = new Guid("a35a2e5a-63a7-48a6-ab62-1ab5bf012c65"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Bebidas"
                  });
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.FoodShop.InventoryEntity", b =>
          {
            b.Property<Guid>("ProductId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uniqueidentifier");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<decimal>("Price")
                      .HasPrecision(10, 2)
                      .HasColumnType("decimal(10,2)");

            b.Property<int>("Quantity")
                      .HasColumnType("int");

            b.Property<int>("QuantityAvailable")
                      .HasColumnType("int");

            b.Property<decimal>("Unit")
                      .HasPrecision(9, 2)
                      .HasColumnType("decimal(9,2)");

            b.Property<string>("UnitType")
                      .IsRequired()
                      .HasMaxLength(3)
                      .IsUnicode(false)
                      .HasColumnType("varchar(3)");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("ProductId");

            b.ToTable("Inventory", "dbo");

            b.HasData(
                      new
                  {
                    ProductId = new Guid("0ab34369-9ea3-4153-97ae-099ebef7f746"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 10, 9, 11, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 4400.5m,
                    Quantity = 24,
                    QuantityAvailable = 20,
                    Unit = 500.2m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("b1369640-650a-46f8-ad78-677690e222db"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 11, 2, 26, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 3250.44m,
                    Quantity = 66,
                    QuantityAvailable = 51,
                    Unit = 340.5m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("9f15a35d-c294-471b-905f-e72d85538610"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 11, 10, 4, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 8990.50m,
                    Quantity = 10,
                    QuantityAvailable = 8,
                    Unit = 220m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("8b0ce0e2-2850-4673-bc32-8cfd0554409b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 14, 17, 15, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 9120.50m,
                    Quantity = 120,
                    QuantityAvailable = 68,
                    Unit = 1000.8m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("3bfd012b-734b-424b-8c38-31f550037db6"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 15, 20, 11, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 2490.10m,
                    Quantity = 310,
                    QuantityAvailable = 310,
                    Unit = 500m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("7124211b-ff28-41b6-8404-d111c0a7ddb3"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 6, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 55500m,
                    Quantity = 8,
                    QuantityAvailable = 7,
                    Unit = 720.2m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("9037cc53-fa37-4dd6-8833-40d583fd2371"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 21, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 15167.50m,
                    Quantity = 13,
                    QuantityAvailable = 9,
                    Unit = 250.5m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("3cbcffd4-60a8-4584-97a0-eacabf555ad8"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 23, 17, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 17430.40m,
                    Quantity = 45,
                    QuantityAvailable = 43,
                    Unit = 500m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("920c202d-4ed1-453d-8769-557f4e5d0f90"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 3, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 5200.5m,
                    Quantity = 80,
                    QuantityAvailable = 71,
                    Unit = 250.5m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("96be3795-4827-4def-b766-6302e4ae3fef"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 10, 5, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 7900m,
                    Quantity = 33,
                    QuantityAvailable = 11,
                    Unit = 200m,
                    UnitType = "G"
                  },
                      new
                  {
                    ProductId = new Guid("b3ce1679-ae8e-4f5b-9c22-0b672d7aab48"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 20, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 22000m,
                    Quantity = 29,
                    QuantityAvailable = 22,
                    Unit = 7200m,
                    UnitType = "Ml"
                  },
                      new
                  {
                    ProductId = new Guid("67073233-c813-4646-ba42-06b7e7997fa9"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 21, 2, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 48250.50m,
                    Quantity = 19,
                    QuantityAvailable = 19,
                    Unit = 1.3m,
                    UnitType = "Lt"
                  },
                      new
                  {
                    ProductId = new Guid("b323b549-dd2f-4fa5-aace-46239ed7f954"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 22, 9, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Price = 2720.80m,
                    Quantity = 50,
                    QuantityAvailable = 29,
                    Unit = 400m,
                    UnitType = "Ml"
                  });
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.FoodShop.ProductEntity", b =>
          {
            b.Property<Guid>("ProductId")
                      .HasColumnType("uniqueidentifier");

            b.Property<Guid>("CatalogueId")
                      .HasColumnType("uniqueidentifier");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<string>("Description")
                      .HasMaxLength(100)
                      .IsUnicode(false)
                      .HasColumnType("varchar(100)");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(50)
                      .IsUnicode(false)
                      .HasColumnType("varchar(50)");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("ProductId");

            b.HasIndex("CatalogueId");

            b.HasIndex("Name")
                      .IsUnique();

            b.ToTable("Product", "dbo");

            b.HasData(
                      new
                  {
                    ProductId = new Guid("0ab34369-9ea3-4153-97ae-099ebef7f746"),
                    CatalogueId = new Guid("efddc257-66f9-4abc-815e-cd8bb4d39897"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 10, 9, 11, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Description = "Apio crudo",
                    Name = "Apio"
                  },
                      new
                  {
                    ProductId = new Guid("b1369640-650a-46f8-ad78-677690e222db"),
                    CatalogueId = new Guid("efddc257-66f9-4abc-815e-cd8bb4d39897"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 11, 2, 26, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Chayote cocido picado"
                  },
                      new
                  {
                    ProductId = new Guid("9f15a35d-c294-471b-905f-e72d85538610"),
                    CatalogueId = new Guid("efddc257-66f9-4abc-815e-cd8bb4d39897"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 11, 10, 4, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Chile jalapeño"
                  },
                      new
                  {
                    ProductId = new Guid("8b0ce0e2-2850-4673-bc32-8cfd0554409b"),
                    CatalogueId = new Guid("16d135b1-e117-47ad-a4ac-c15d40f133fd"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 14, 17, 15, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Fresa entera"
                  },
                      new
                  {
                    ProductId = new Guid("3bfd012b-734b-424b-8c38-31f550037db6"),
                    CatalogueId = new Guid("16d135b1-e117-47ad-a4ac-c15d40f133fd"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 15, 20, 11, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Guayaba rosa"
                  },
                      new
                  {
                    ProductId = new Guid("7124211b-ff28-41b6-8404-d111c0a7ddb3"),
                    CatalogueId = new Guid("525d3a2b-3b4a-48e0-9e8e-8a5a844e4d0b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 6, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Galleta salmas"
                  },
                      new
                  {
                    ProductId = new Guid("9037cc53-fa37-4dd6-8833-40d583fd2371"),
                    CatalogueId = new Guid("525d3a2b-3b4a-48e0-9e8e-8a5a844e4d0b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 21, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Maíz Tostado"
                  },
                      new
                  {
                    ProductId = new Guid("3cbcffd4-60a8-4584-97a0-eacabf555ad8"),
                    CatalogueId = new Guid("525d3a2b-3b4a-48e0-9e8e-8a5a844e4d0b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 18, 23, 17, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Galleta de animalitos"
                  },
                      new
                  {
                    ProductId = new Guid("920c202d-4ed1-453d-8769-557f4e5d0f90"),
                    CatalogueId = new Guid("525d3a2b-3b4a-48e0-9e8e-8a5a844e4d0b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 3, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Pan de barra"
                  },
                      new
                  {
                    ProductId = new Guid("96be3795-4827-4def-b766-6302e4ae3fef"),
                    CatalogueId = new Guid("525d3a2b-3b4a-48e0-9e8e-8a5a844e4d0b"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 10, 5, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Name = "Galleta maría"
                  },
                      new
                  {
                    ProductId = new Guid("b3ce1679-ae8e-4f5b-9c22-0b672d7aab48"),
                    CatalogueId = new Guid("a35a2e5a-63a7-48a6-ab62-1ab5bf012c65"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 19, 20, 2, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Description = "Agua natural Cristal",
                    Name = "Cristal"
                  },
                      new
                  {
                    ProductId = new Guid("67073233-c813-4646-ba42-06b7e7997fa9"),
                    CatalogueId = new Guid("a35a2e5a-63a7-48a6-ab62-1ab5bf012c65"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 21, 2, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Description = "Leche entera alqueria",
                    Name = "Leche entera"
                  },
                      new
                  {
                    ProductId = new Guid("b323b549-dd2f-4fa5-aace-46239ed7f954"),
                    CatalogueId = new Guid("a35a2e5a-63a7-48a6-ab62-1ab5bf012c65"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 22, 9, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    Description = "Té Verde FUZE Manzanilla",
                    Name = "Té Verde"
                  });
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.PermissionEntity", b =>
          {
            b.Property<Guid>("PermissionId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<string>("DisplayName")
                      .IsRequired()
                      .HasMaxLength(50)
                      .IsUnicode(false)
                      .HasColumnType("varchar(50)");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(50)
                      .IsUnicode(false)
                      .HasColumnType("varchar(50)");

            b.Property<int>("Order")
                      .HasColumnType("int");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("PermissionId");

            b.HasIndex("Name", "DisplayName")
                      .IsUnique();

            b.ToTable("Permission", "dbo");

            b.HasData(
                      new
                  {
                    PermissionId = new Guid("b4748720-c24d-44bb-9c76-cdddc3a0574d"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 24, 10, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    DisplayName = "Manage Food",
                    Name = "AllowManageFood",
                    Order = 1
                  },
                      new
                  {
                    PermissionId = new Guid("a4f4aba0-8a5c-431d-82d5-de44bebd223e"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 1, 14, 5, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    DisplayName = "List Orders",
                    Name = "AllowListOrders",
                    Order = 2
                  },
                      new
                  {
                    PermissionId = new Guid("7cadecb0-c11f-4884-beaf-7b37090282a1"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 2, 8, 49, 33, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    DisplayName = "List Order By User",
                    Name = "AllowListOrderByUser",
                    Order = 3
                  },
                      new
                  {
                    PermissionId = new Guid("e74c1d1b-c402-43d1-9492-0df9a67729c8"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 2, 20, 1, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    DisplayName = "Create Order",
                    Name = "AllowCreateOrder",
                    Order = 4
                  });
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.RoleEntity", b =>
          {
            b.Property<Guid>("RoleId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<string>("DisplayName")
                      .IsRequired()
                      .HasMaxLength(50)
                      .IsUnicode(false)
                      .HasColumnType("varchar(50)");

            b.Property<string>("Name")
                      .IsRequired()
                      .HasMaxLength(30)
                      .IsUnicode(false)
                      .HasColumnType("varchar(30)");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("RoleId");

            b.HasIndex("Name", "DisplayName")
                      .IsUnique();

            b.ToTable("Role", "dbo");

            b.HasData(
                      new
                  {
                    RoleId = new Guid("d146b771-7df4-411f-8ccb-490b2d65d22f"),
                    Created = new DateTimeOffset(new DateTime(2024, 1, 10, 12, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    DisplayName = "Administrator",
                    Name = "AdminUser"
                  },
                      new
                  {
                    RoleId = new Guid("838c1363-9abd-4999-95e8-71382312ac74"),
                    Created = new DateTimeOffset(new DateTime(2024, 2, 5, 16, 23, 11, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                    DisplayName = "Common User",
                    Name = "CommonUser"
                  });
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.RolePermissionEntity", b =>
          {
            b.Property<Guid>("RoleId")
                      .HasColumnType("uniqueidentifier");

            b.Property<Guid>("PermissionId")
                      .HasColumnType("uniqueidentifier");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("RoleId", "PermissionId");

            b.HasIndex("PermissionId");

            b.ToTable("RolePermission", "dbo");

            b.HasData(
                      new
                  {
                    RoleId = new Guid("d146b771-7df4-411f-8ccb-490b2d65d22f"),
                    PermissionId = new Guid("b4748720-c24d-44bb-9c76-cdddc3a0574d"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 1, 17, 33, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                  },
                      new
                  {
                    RoleId = new Guid("d146b771-7df4-411f-8ccb-490b2d65d22f"),
                    PermissionId = new Guid("a4f4aba0-8a5c-431d-82d5-de44bebd223e"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 9, 22, 12, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                  },
                      new
                  {
                    RoleId = new Guid("d146b771-7df4-411f-8ccb-490b2d65d22f"),
                    PermissionId = new Guid("7cadecb0-c11f-4884-beaf-7b37090282a1"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 24, 11, 43, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                  },
                      new
                  {
                    RoleId = new Guid("d146b771-7df4-411f-8ccb-490b2d65d22f"),
                    PermissionId = new Guid("e74c1d1b-c402-43d1-9492-0df9a67729c8"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 25, 4, 28, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                  },
                      new
                  {
                    RoleId = new Guid("838c1363-9abd-4999-95e8-71382312ac74"),
                    PermissionId = new Guid("7cadecb0-c11f-4884-beaf-7b37090282a1"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 25, 0, 1, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                  },
                      new
                  {
                    RoleId = new Guid("838c1363-9abd-4999-95e8-71382312ac74"),
                    PermissionId = new Guid("e74c1d1b-c402-43d1-9492-0df9a67729c8"),
                    Created = new DateTimeOffset(new DateTime(2024, 3, 28, 1, 22, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0))
                  });
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.UserEntity", b =>
          {
            b.Property<Guid>("UserId")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("uniqueidentifier")
                      .HasDefaultValueSql("NEWID()");

            b.Property<DateTimeOffset>("Created")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("datetimeoffset")
                      .HasDefaultValueSql("GETUTCDATE()");

            b.Property<string>("DocumentNumber")
                      .IsRequired()
                      .HasColumnType("nvarchar(450)");

            b.Property<string>("Email")
                      .IsRequired()
                      .HasMaxLength(100)
                      .IsUnicode(false)
                      .HasColumnType("varchar(100)");

            b.Property<string>("Firstname")
                      .IsRequired()
                      .HasMaxLength(50)
                      .IsUnicode(false)
                      .HasColumnType("varchar(50)");

            b.Property<string>("Lastname")
                      .IsRequired()
                      .HasMaxLength(50)
                      .IsUnicode(false)
                      .HasColumnType("varchar(50)");

            b.Property<string>("Password")
                      .IsRequired()
                      .HasColumnType("varchar(max)");

            b.Property<Guid>("RoleId")
                      .HasColumnType("uniqueidentifier");

            b.Property<string>("Username")
                      .IsRequired()
                      .HasMaxLength(100)
                      .IsUnicode(false)
                      .HasColumnType("varchar(100)");

            b.Property<byte[]>("Version")
                      .IsConcurrencyToken()
                      .IsRequired()
                      .ValueGeneratedOnAddOrUpdate()
                      .HasColumnType("rowversion");

            b.HasKey("UserId");

            b.HasIndex("RoleId");

            b.HasIndex("DocumentNumber", "Username", "Email")
                      .IsUnique();

            b.ToTable("User", "dbo");
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.FoodShop.ProductEntity", b =>
          {
            b.HasOne("ManageFood.Domain.Entities.FoodShop.CatalogueEntity", "Catalogue")
                      .WithMany("Products")
                      .HasForeignKey("CatalogueId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("ManageFood.Domain.Entities.FoodShop.InventoryEntity", null)
                      .WithOne("Product")
                      .HasForeignKey("ManageFood.Domain.Entities.FoodShop.ProductEntity", "ProductId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Catalogue");
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.RolePermissionEntity", b =>
          {
            b.HasOne("ManageFood.Domain.Entities.PermissionEntity", "Permission")
                      .WithMany("RolePermissions")
                      .HasForeignKey("PermissionId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("ManageFood.Domain.Entities.RoleEntity", "Role")
                      .WithMany("RolePermissions")
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Permission");

            b.Navigation("Role");
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.UserEntity", b =>
          {
            b.HasOne("ManageFood.Domain.Entities.RoleEntity", "Role")
                      .WithMany("Users")
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Role");
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.FoodShop.CatalogueEntity", b =>
          {
            b.Navigation("Products");
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.FoodShop.InventoryEntity", b =>
          {
            b.Navigation("Product")
                      .IsRequired();
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.PermissionEntity", b =>
          {
            b.Navigation("RolePermissions");
          });

      modelBuilder.Entity("ManageFood.Domain.Entities.RoleEntity", b =>
          {
            b.Navigation("RolePermissions");

            b.Navigation("Users");
          });
#pragma warning restore 612, 618
    }
  }
}
